class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node
            new_node.prev = current

    def delete(self, data):
        if self.head is None:
            return

        current = self.head

        # If the element to be deleted is the head node
        if current and current.data == data:
            if current.next:
                self.head = current.next
                current.next.prev = None
            else:
                self.head = None
            return

        while current and current.data != data:
            current = current.next

        if current is None:
            return

        if current.next:
            current.prev.next = current.next
            current.next.prev = current.prev
        else:
            current.prev.next = None

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()


# Example usage
dll = DoublyLinkedList()

# Inserting elements
dll.insert_at_beginning(20)
dll.insert_at_beginning(10)
dll.insert_at_end(30)

# Display the list
print("Doubly Linked List: ")
dll.display()  # Output: 20 10 30

# Deleting an element
dll.delete(10)

# Display the updated list
print("Updated Doubly Linked List: ")
dll.display()  # Output: 20 30

